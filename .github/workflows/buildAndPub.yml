name: Build and Publish

on:
  schedule:
    # At 04:00 on day-of-month 1.
    - cron: "0 4 1 * *"
  workflow_dispatch:
  push:
    branches:
      - "main"

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      latest: ${{ steps.latest-version.outputs.matrix }}
      devcontainer_matrix: ${{ steps.prepare-dev-matrix.outputs.matrix }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master

      - name: Check Docker image platforms
        id: check-platforms
        run: bash ./gen-platforms-matrix.sh

      - uses: cloudposse/github-action-jq@main
        id: latest-version
        with:
          compact: true
          input: node_versions.json
          script: 'map(select(.version | startswith("v20"))) | max_by(.version) | .version'

      - uses: cloudposse/github-action-jq@main
        id: reparse-tags
        with:
          compact: true
          input: config.json
          script: '{"tag": . }'

      - run: echo 'matrix=${{ steps.reparse-tags.outputs.output }}' >> $GITHUB_OUTPUT
        id: set-matrix

      # Pick the top 3 major versions for devcontainers
      - uses: cloudposse/github-action-jq@main
        id: reparse-dev-tags
        with:
          compact: true
          input: config.json
          script: 'sort_by(.major) | reverse | group_by(.major) | map(.[0]) | sort_by(.major) | reverse | .[:3]'

      - run: echo 'devcontainer_matrix=${{ steps.reparse-dev-tags.outputs.output }}' >> $GITHUB_OUTPUT
        id: set-dev-matrix

  build:
    needs: prepare-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.prepare-matrix.outputs.matrix)}}
    env:
      LATEST_VERSION: ${{ needs.prepare-matrix.outputs.latest }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          logout: true

      - name: Parse version
        id: parse_version
        run: |
          VERSION=${{ matrix.tag.version }}
          PARSED_VERSION=${VERSION#v}
          echo "PARSED_VERSION=$PARSED_VERSION" >> $GITHUB_OUTPUT
        shell: bash
        
      - name: Is Latest
        id: is_latest
        run: |
          if [ "${{ matrix.tag.version }}" = "${{ env.LATEST_VERSION }}" ]; then
            echo "IS_LATEST=true" >> $GITHUB_OUTPUT
          else
            echo "IS_LATEST=false" >> $GITHUB_OUTPUT
          fi

      - name: Build
        uses: docker/build-push-action@v5
        with:
          build-args: |
            NODE_MAJOR=${{ matrix.tag.major }}
            NODE_VERSION=${{ steps.parse_version.outputs.PARSED_VERSION }}
          context: .
          platforms: ${{ matrix.tag.platforms }}
          push: true
          tags: |
            betterweb/node:${{steps.parse_version.outputs.PARSED_VERSION}}
            betterweb/node:${{matrix.tag.major}}
            ${{ steps.is_latest.outputs.IS_LATEST == 'true' && 'betterweb/node:latest' || '' }}

  build-devcontainers:
    needs: prepare-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.prepare-matrix.outputs.devcontainer_matrix)}}
    env:
      LATEST_VERSION: ${{ needs.prepare-matrix.outputs.latest }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          logout: true

      - name: Parse version
        id: parse_version
        run: |
          VERSION=${{ matrix.tag.version }}
          PARSED_VERSION=${VERSION#v}
          echo "PARSED_VERSION=$PARSED_VERSION" >> $GITHUB_OUTPUT
        shell: bash

      - name: Is Latest
        id: is_latest
        run: |
          if [ "${{ matrix.tag.version }}" = "${{ env.LATEST_VERSION }}" ]; then
            echo "IS_LATEST=true" >> $GITHUB_OUTPUT
          else
            echo "IS_LATEST=false" >> $GITHUB_OUTPUT
          fi

      - name: Build and push devcontainer image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.devcontainer
          push: true
          build-args: |
            NODE_MAJOR=${{ matrix.tag.major }}
            NODE_VERSION=${{ steps.parse_version.outputs.PARSED_VERSION }}
          tags: |
            betterweb/node:devcontainer-${{steps.parse_version.outputs.PARSED_VERSION}}
            betterweb/node:devcontainer-${{matrix.tag.major}}
            ${{ steps.is_latest.outputs.IS_LATEST == 'true' && 'betterweb/node:devcontainer-latest' || '' }}
